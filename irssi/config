servers = (
  {
    address = "irc.freenode.net";
    chatnet = "fnode";
    port = "6667";
    autoconnect = "yes";
  },
  {
    address = "irc.perl.org";
    chatnet = "perl";
    port = "6667";
    autoconnect = "yes";
  }
);

chatnets = {
  fnode = { type = "IRC"; };
  perl = { type = "IRC"; };
};

channels = (
  { name = "#crowdtilt"; chatnet = "fnode"; autojoin = "yes"; },
  { name = "#rackjam"; chatnet = "fnode"; autojoin = "yes"; },
  { name = "#perl"; chatnet = "fnode"; autojoin = "yes"; },
  { name = "#vim"; chatnet = "fnode"; autojoin = "yes"; },

  "aliases",
  {
    J = "join";
    WJ = "join -window";
    WQUERY = "query -window";
    LEAVE = "part";
    BYE = "quit";
    EXIT = "quit";
    DESCRIBE = "action";
    DATE = "time";
    HOST = "userhost";
    LAST = "lastlog";
    SAY = "msg *";
    WI = "whois";
    WII = "whois $0 $0";
    WW = "whowas";
    W = "who";
    N = "names";
    M = "msg";
    T = "topic";
    C = "clear";
    IG = "ignore";
    UIG = "unignore";
    WC = "window close";
    WN = "window new hide";
    CHAT = "dcc chat";
    RUN = "SCRIPT LOAD";
    CALC = "exec - if which bc &>/dev/null\\; then echo '$*' | bc | awk '{print \"$*=\"$$1}'\\; else echo bc was not found\\; fi";
    "MANUAL-WINDOWS" = "set use_status_window off;set autocreate_windows off;set autocreate_query_level none;set autoclose_windows off;set reuse_unused_windows on;save";
    EXEMPTLIST = "mode $C +e";
    ATAG = "WINDOW SERVER";
    SSH = "window new hidden;window name ssh;exec -name ssh -nosh -interactive -window ssh $-";
    F = "/url_open";
  },

  "statusbar",
  {
    # formats:
    # when using {templates}, the template is shown only if it's argument isn't
    # empty unless no argument is given. for example {sb} is printed always,
    # but {sb $T} is printed only if $T isn't empty.

    items = {
      # start/end text in statusbars
      barstart = "{sbstart}";
      barend = "{sbend}";

      topicbarstart = "{topicsbstart}";
      topicbarend = "{topicsbend}";

      # treated "normally", you could change the time/user name to whatever
      time = "{sb $Z}";
      user = "{sb {sbnickmode $cumode}$N{sbmode $usermode}{sbaway $A}}";

      # treated specially .. window is printed with non-empty windows,
      # window_empty is printed with empty windows
      window = "{sb $winref:$tag/$itemname{sbmode $M}}";
      window_empty = "{sb $winref{sbservertag $tag}}";
      prompt = "{prompt $[.15]itemname}";
      prompt_empty = "{prompt $winname}";
      topic = " $topic";
      topic_empty = " Irssi v$J - http://www.irssi.org";

      # all of these treated specially, they're only displayed when needed
      lag = "{sb Lag: $0-}";
      act = "{sb Act: $0-}";
      more = "-- more --";
    };

    # there's two type of statusbars. root statusbars are either at the top
    # of the screen or at the bottom of the screen. window statusbars are at
    # the top/bottom of each split window in screen.
    default = {
      # the "default statusbar" to be displayed at the bottom of the window.
      # contains all the normal items.
      window = {
        disabled = "no";

        # window, root
        type = "window";
        # top, bottom
        placement = "bottom";
        # number
        position = "1";
        # active, inactive, always
        visible = "active";

        # list of items in statusbar in the display order
        items = {
          barstart = { priority = "100"; };
          time = { };
          user = { };
          window = { };
          window_empty = { };
          lag = { priority = "-1"; };
          act = { priority = "10"; };
          more = { priority = "-1"; alignment = "right"; };
          barend = { priority = "100"; alignment = "right"; };
        };
      };

      # statusbar to use in inactive split windows
      window_inact = {
        type = "window";
        placement = "bottom";
        position = "1";
        visible = "inactive";
        items = {
          barstart = { priority = "100"; };
          window = { };
          window_empty = { };
          more = { priority = "-1"; alignment = "right"; };
          barend = { priority = "100"; alignment = "right"; };
        };
      };

      # we treat input line as yet another statusbar :) It's possible to
      # add other items before or after the input line item.
      prompt = {
        type = "root";
        placement = "bottom";
        # we want to be at the bottom always
        position = "100";
        visible = "always";
        items = {
          prompt = { priority = "-1"; };
          prompt_empty = { priority = "-1"; };
          # treated specially, this is the real input line.
          input = { priority = "10"; };
        };
      };

      # topicbar
      topic = {
        type = "root";
        placement = "top";
        position = "1";
        visible = "always";
        items = {
          topicbarstart = { priority = "100"; };
          topic = { };
          topic_empty = { };
          topicbarend = { priority = "100"; alignment = "right"; };
        };
      };
    };
  },
  "settings",
  {
    core = {
      real_name = "Will";
      user_name = "will";
      nick = "throughnothing";
    };
    "fe-text" = { actlist_sort = "refnum"; };
    "fe-common/core" = {
      use_status_window = "yes";
      autocreate_windows = "yes";
      autocreate_query_level = "msgs";
      autocreate_own_query = "yes";
      autoclose_windows = "no";
      reuse_unused_windows = "yes";
      windows_auto_renumber = "yes";
      theme = "splitfire";
    };
  },
  "keyboard",
  { key = "meta-x"; id = "command"; data = "window last"; },
  { key = "^L"; id = "command"; data = "window next"; },
  { key = "^H"; id = "command"; data = "window previous"; },
  { key = "^C"; id = "command"; data = "window close"; }
);
settings = {
  core = {
    real_name = "throughnothing";
    user_name = "throughnothing";
    nick = "throughnothing";
  };
  "fe-text" = { actlist_sort = "refnum"; indent = "26"; };
  "fe-common/core" = { theme = "envy"; };
};
ignores = ( { mask = "roodytood"; level = "ALL"; } );
