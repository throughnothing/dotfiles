[user]
	name = William Wolf
  useConfigOnly = true
  email = throughnothing@gmail.com

[color]
    ui = auto
[advice]
    statusHints = false
[core]
    excludesfile = /Users/throughnothing/.gitignore_global
	precomposeunicode = true
	editor = /usr/bin/vim
[push]
	default = current
[alias]
    gl = --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    cleanup = gc --prune=now
    head = log -n1 --pretty=%H
    mnc = merge --no-commit
    com = commit -m
    bd = branch -D
    df = diff
    dc = diff --cached
    l = log --decorate --pretty=oneline --abbrev-commit --date=short
    lg = log --decorate --graph --pretty=oneline --abbrev-commit --date=short
    lm = log --decorate --pretty=oneline --abbrev-commit --merges --date=short
    lnm = log --decorate --pretty=oneline --abbrev-commit --no-merges --date=short
    lp = log -p
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
    dl = log --pretty=format:'%h %ad %an %s' --decorate --no-merges --date=short
    ls = ls-files
    rbm = rebase -i master
    rbd = rebase dev
    su = branch --set-upstream


    # add
    a = add # add
    ap = add --patch # add with patch
    chunkyadd = add --patch # stage commits chunk by chunk

    # branch
    b = branch -v # branch (verbose)

    # commit
    c = commit # commit with message
    ca = commit -a # commit all with message
    cam = commit --amend # commit all ammended
    ci = commit # commit
    amend = commit --amend # ammend your last commit
    ammend = commit --amend # ammend your last commit

    # checkout
    co = checkout # checkout
    coo = checkout --ours # checkout
    cot = checkout --theirs # checkout
    nb = checkout -b

    # cherry-pick
    cp = cherry-pick -x # grab a change from a branch

    # diff
    d = diff
    dt = difftool
    dc = diff --cached # diff staged changes
    last = diff HEAD^ # diff last committed change

    # log
    # log = log --decorate --graph --date=short
    # l = log
    changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
    short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
    changelog = log --pretty=format:\" * %s\"
    shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

    # FROM https://github.com/skwp/dotfiles/blob/master/git/gitconfig
    # pull
    pl = pull # pull

    # push
    ps = push # push

    # rebase
    rc = rebase --continue # continue rebase
    rs = rebase --skip # skip rebase

    # remote
    r = remote -v # show remotes (verbose)

    # reset
    unstage = reset HEAD # remove files from index (tracking)
    uncommit = reset --soft HEAD^
    filelog = log -u # show changes to a file
    mt = mergetool # fire up the merge tool

    # stash
    ss = stash # stash changes
    sl = stash list # list stashes
    sa = stash apply # apply stash (restore changes)
    sp = stash pop # pop stash (restore changes)
    sd = stash drop # drop stashes (destory changes)

    # status
    s = status # status
    st = status # status
    stat = status # status

    # tag
    t = tag -n # show tags with <n> lines of each tag message
    td = tag -d # delete tag

    # svn helpers
    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit

[diff]
    tool = mvim
[difftool "mvim"]
    cmd = mvim -v -d -f $LOCAL $REMOTE
[difftool]
    prompt = false

    # From: http://pyrtsa.posterous.com/aligning-your-git-logs
    l50 = "!git log --abbrev-commit --date=short --pretty=format:'%x00%h%x00%cd%x00%s%x00%an%x00%d' | gawk -F '\\0' '{ printf \"%s\\033[31m%s\\033[0m \\033[32m%s\\033[0m %-50s \\033[30;1m%s\\033[0m\\033[33m%s\\n\", $1, $2, $3, gensub(/(.{49}).{2,}/, \"\\\\1…\",\"g\",$4), $5, $6 }' | less -R"
    l80 = "!git log --abbrev-commit --date=short --pretty=format:'%x00%h%x00%cd%x00%s%x00%an%x00%d' | gawk -F '\\0' '{ printf \"%s\\033[31m%s\\033[0m \\033[32m%s\\033[0m %-80s \\033[30;1m%s\\033[0m\\033[33m%s\\n\", $1, $2, $3, gensub(/(.{79}).{2,}/, \"\\\\1…\",\"g\",$4), $5, $6 }' | less -R"
    lg50 = "!git log --graph --color=always --abbrev-commit --date=relative --pretty=format:'%x00%h%x00%s%x00%cd%x00%an%x00%d' | gawk -F '\\0' '{ printf \"%s\\033[31m%s\\033[0m %-50s \\033[32m%14s\\033[0m \\033[30;1m%s\\033[0m\\033[33m%s\\n\", $1, $2, gensub(/(.{49}).{2,}/, \"\\\\1…\",\"g\",$3), $4, $5, $6 }' | less -R"
    lg80 = "!git log --graph --color=always --abbrev-commit --date=relative --pretty=format:'%x00%h%x00%s%x00%cd%x00%an%x00%d' | gawk -F '\\0' '{ printf \"%s\\033[31m%s\\033[0m %-80s \\033[32m%14s\\033[0m \\033[30;1m%s\\033[0m\\033[33m%s\\n\", $1, $2, gensub(/(.{79}).{2,}/, \"\\\\1…\",\"g\",$3), $4, $5, $6 }' | less -R"
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[rerere]
	enabled = true
